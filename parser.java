
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150226 (SVN rev 63)
//----------------------------------------------------

import java_cup.runtime.*;
import java.lang.Math;
import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150226 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\057\000\002\002\010\000\002\002\004\000\002\003" +
    "\003\000\002\017\012\000\002\020\003\000\002\021\006" +
    "\000\002\021\006\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\015\003\000\002\015\004\000\002\014" +
    "\003\000\002\016\003\000\002\024\003\000\002\024\004" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\025\007\000\002\012\003\000\002" +
    "\012\004\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\026\012\000\002\027\010\000\002\022\005" +
    "\000\002\030\007\000\002\030\007\000\002\030\007\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\005" +
    "\005\000\002\010\003\000\002\010\003\000\002\006\003" +
    "\000\002\004\003\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\004\006\005\001\002\000\004\002\127\001" +
    "\002\000\004\025\006\001\002\000\004\015\011\001\002" +
    "\000\004\006\013\001\002\000\004\006\uffff\001\002\000" +
    "\020\006\uffd5\007\uffd5\015\uffd5\035\uffd5\036\uffd5\043\uffd5" +
    "\044\uffd5\001\002\000\004\006\024\001\002\000\004\026" +
    "\014\001\002\000\004\015\011\001\002\000\004\015\011" +
    "\001\002\000\012\006\ufffd\015\ufffd\043\ufffd\044\ufffd\001" +
    "\002\000\006\006\ufff4\015\ufff4\001\002\000\006\006\024" +
    "\015\011\001\002\000\006\006\ufff2\015\ufff2\001\002\000" +
    "\006\006\024\027\121\001\002\000\012\006\ufff0\007\ufff0" +
    "\027\ufff0\032\ufff0\001\002\000\026\010\035\011\042\012" +
    "\032\013\036\014\037\015\011\022\041\030\043\033\033" +
    "\037\044\001\002\000\012\006\uffed\007\uffed\027\uffed\032" +
    "\uffed\001\002\000\012\006\uffeb\007\uffeb\027\uffeb\032\uffeb" +
    "\001\002\000\012\006\uffec\007\uffec\027\uffec\032\uffec\001" +
    "\002\000\006\006\ufff3\015\ufff3\001\002\000\012\006\uffee" +
    "\007\uffee\027\uffee\032\uffee\001\002\000\012\006\ufff9\015" +
    "\ufff9\043\ufff9\044\ufff9\001\002\000\004\006\045\001\002" +
    "\000\012\006\070\015\011\043\055\044\072\001\002\000" +
    "\012\006\ufff7\015\ufff7\043\ufff7\044\ufff7\001\002\000\012" +
    "\006\ufff8\015\ufff8\043\ufff8\044\ufff8\001\002\000\012\006" +
    "\ufff6\015\ufff6\043\ufff6\044\ufff6\001\002\000\012\006\070" +
    "\015\011\043\055\044\072\001\002\000\004\015\011\001" +
    "\002\000\012\006\ufffa\015\ufffa\043\ufffa\044\ufffa\001\002" +
    "\000\004\006\045\001\002\000\012\006\ufff5\015\ufff5\043" +
    "\ufff5\044\ufff5\001\002\000\026\006\070\015\011\016\063" +
    "\017\056\020\061\021\057\023\062\024\066\043\055\044" +
    "\072\001\002\000\004\031\047\001\002\000\004\006\024" +
    "\001\002\000\006\006\024\032\051\001\002\000\004\006" +
    "\024\001\002\000\012\006\uffef\007\uffef\027\uffef\032\uffef" +
    "\001\002\000\006\006\024\007\054\001\002\000\012\006" +
    "\uffe4\007\uffe4\027\uffe4\032\uffe4\001\002\000\020\006\uffd4" +
    "\007\uffd4\015\uffd4\035\uffd4\036\uffd4\043\uffd4\044\uffd4\001" +
    "\002\000\012\006\uffda\015\uffda\043\uffda\044\uffda\001\002" +
    "\000\012\006\uffd9\015\uffd9\043\uffd9\044\uffd9\001\002\000" +
    "\020\006\uffe5\007\uffe5\015\uffe5\035\uffe5\036\uffe5\043\uffe5" +
    "\044\uffe5\001\002\000\012\006\uffdb\015\uffdb\043\uffdb\044" +
    "\uffdb\001\002\000\012\006\uffdd\015\uffdd\043\uffdd\044\uffdd" +
    "\001\002\000\012\006\uffde\015\uffde\043\uffde\044\uffde\001" +
    "\002\000\012\006\070\015\011\043\055\044\072\001\002" +
    "\000\020\006\uffe6\007\uffe6\015\uffe6\035\uffe6\036\uffe6\043" +
    "\uffe6\044\uffe6\001\002\000\012\006\uffdc\015\uffdc\043\uffdc" +
    "\044\uffdc\001\002\000\020\006\uffe7\007\uffe7\015\uffe7\035" +
    "\uffe7\036\uffe7\043\uffe7\044\uffe7\001\002\000\020\010\035" +
    "\011\042\012\032\013\036\014\037\015\011\037\044\001" +
    "\002\000\006\035\074\036\073\001\002\000\020\006\uffd3" +
    "\007\uffd3\015\uffd3\035\uffd3\036\uffd3\043\uffd3\044\uffd3\001" +
    "\002\000\012\006\070\015\011\043\055\044\072\001\002" +
    "\000\012\006\070\015\011\043\055\044\072\001\002\000" +
    "\004\007\076\001\002\000\006\031\uffdf\034\uffdf\001\002" +
    "\000\004\007\100\001\002\000\006\031\uffe0\034\uffe0\001" +
    "\002\000\012\006\070\015\011\043\055\044\072\001\002" +
    "\000\004\007\103\001\002\000\006\031\uffe1\034\uffe1\001" +
    "\002\000\012\006\070\015\011\043\055\044\072\001\002" +
    "\000\004\007\106\001\002\000\012\006\uffea\007\uffea\027" +
    "\uffea\032\uffea\001\002\000\014\006\uffe9\007\uffe9\015\uffe9" +
    "\043\uffe9\044\uffe9\001\002\000\014\006\070\007\111\015" +
    "\011\043\055\044\072\001\002\000\024\006\ufffc\007\ufffc" +
    "\015\ufffc\027\ufffc\032\ufffc\035\ufffc\036\ufffc\043\ufffc\044" +
    "\ufffc\001\002\000\014\006\uffe8\007\uffe8\015\uffe8\043\uffe8" +
    "\044\uffe8\001\002\000\014\006\070\007\114\015\011\043" +
    "\055\044\072\001\002\000\024\006\ufffb\007\ufffb\015\ufffb" +
    "\027\ufffb\032\ufffb\035\ufffb\036\ufffb\043\ufffb\044\ufffb\001" +
    "\002\000\004\034\116\001\002\000\004\006\024\001\002" +
    "\000\006\006\024\007\120\001\002\000\012\006\uffe3\007" +
    "\uffe3\027\uffe3\032\uffe3\001\002\000\004\015\011\001\002" +
    "\000\004\007\124\001\002\000\004\007\ufff1\001\002\000" +
    "\004\006\ufffe\001\002\000\006\006\024\007\126\001\002" +
    "\000\004\002\001\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\006\006\007\001\001\000\004" +
    "\017\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\021\024\023\022\024\124\025\030\026\026\027\025" +
    "\001\001\000\002\001\001\000\006\006\015\020\014\001" +
    "\001\000\010\006\020\014\016\015\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\006\020\014\027\021" +
    "\024\023\022\024\021\025\030\026\026\027\025\001\001" +
    "\000\002\001\001\000\014\021\024\023\051\025\030\026" +
    "\026\027\025\001\001\000\002\001\001\000\010\006\015" +
    "\011\033\020\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\114\001\001\000\014\004" +
    "\057\006\064\012\112\013\106\021\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\004" +
    "\057\006\064\012\107\013\106\021\066\001\001\000\004" +
    "\006\103\001\001\000\002\001\001\000\004\030\045\001" +
    "\001\000\002\001\001\000\014\004\057\006\064\007\063" +
    "\013\070\021\066\001\001\000\002\001\001\000\016\021" +
    "\024\023\022\024\047\025\030\026\026\027\025\001\001" +
    "\000\014\021\024\023\051\025\030\026\026\027\025\001" +
    "\001\000\016\021\024\023\022\024\052\025\030\026\026" +
    "\027\025\001\001\000\002\001\001\000\014\021\024\023" +
    "\051\025\030\026\026\027\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\057\006\064\013\100\021\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\015\011\033\020\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\057\006\064\013\076" +
    "\021\066\001\001\000\012\004\057\006\064\013\074\021" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\057\006\064\013" +
    "\101\021\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\057\006\064\013\104\021\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\057\006\064\013\111\021\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\057\006\064\013\111" +
    "\021\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\021\024\023\022\024\116\025\030\026\026\027\025" +
    "\001\001\000\014\021\024\023\051\025\030\026\026\027" +
    "\025\001\001\000\002\001\001\000\006\006\122\016\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\021\024\023\051\025\030\026\026\027\025" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // prog_def ::= CURLY_BRACKET_OPEN PROGRAM prog_title func_def statements CURLY_BRACKET_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog_def",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= prog_def EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // prog_title ::= identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog_title",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // func_def ::= CURLY_BRACKET_OPEN FUNCTION func_title args statements RETURN return_arg CURLY_BRACKET_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_def",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // func_title ::= identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_title",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // func_call ::= CURLY_BRACKET_OPEN func_title parameters CURLY_BRACKET_CLOSE 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // func_call ::= CURLY_BRACKET_OPEN predefined_func parameters CURLY_BRACKET_CLOSE 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // predefined_func ::= ADD 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predefined_func",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // predefined_func ::= MINUS 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predefined_func",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // predefined_func ::= MULTIPLY 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predefined_func",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // predefined_func ::= DIVIDE 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predefined_func",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // predefined_func ::= MOD 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predefined_func",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // predefined_func ::= PRINT 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predefined_func",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // args ::= arg 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // args ::= args arg 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // arg ::= identifier 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // return_arg ::= identifier 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_arg",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statements ::= statement 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statements ::= statements statement 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= assignment_statement 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= func_call 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= if_statement 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= while_statement 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // assignment_statement ::= CURLY_BRACKET_OPEN EQUAL identifier parameter CURLY_BRACKET_CLOSE 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parameters ::= parameter 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parameters ::= parameters parameter 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parameter ::= func_call 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parameter ::= identifier 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parameter ::= number 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // if_statement ::= CURLY_BRACKET_OPEN IF expression THEN statements ELSE statements CURLY_BRACKET_CLOSE 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // while_statement ::= CURLY_BRACKET_OPEN WHILE expression DO statements CURLY_BRACKET_CLOSE 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // print_statement ::= ROUND_BRACKET_OPEN STRING ROUND_BRACKET_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= CURLY_BRACKET_OPEN comparison_operator parameter parameter CURLY_BRACKET_CLOSE 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= CURLY_BRACKET_OPEN parameter AND parameter CURLY_BRACKET_CLOSE 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= CURLY_BRACKET_OPEN parameter OR parameter CURLY_BRACKET_CLOSE 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comparison_operator ::= COMPARE 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_operator",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comparison_operator ::= GREATER 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_operator",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comparison_operator ::= LESS 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_operator",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comparison_operator ::= GREATEREQ 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_operator",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comparison_operator ::= LESSEQ 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_operator",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comparison_operator ::= NOTEQ 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_operator",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // string ::= ROUND_BRACKET_OPEN identifier ROUND_BRACKET_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("string",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // boolean_operator ::= BOOLEAN_TRUE 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_operator",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // boolean_operator ::= BOOLEAN_FALSE 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_operator",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // identifier ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // number ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("number",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // number ::= FLOAT 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("number",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
